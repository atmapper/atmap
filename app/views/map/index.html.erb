<div id="top_map">
<table width="100%" cellspacing="5" style="margin: 5px 0px;"><tbody><tr>
	<td width="30%"><b>ATMapper</b><br/> マップ登録</td>
</tr></tbody></table>

<div style="width:600px;">
<form>
	<table><tbody><tr>
		<td style="width:500px;"><input type="text" value="" placeholder="例）場所・駅など" class="form-control" id="address"></td>
		<td><button class="btn btn-small btn-primary" type="button" id="button">地図検索</button></td>
	</tr></tbody></table>
</form>
</div>
<script>

var button = document.getElementById("button");
button.onclick = function() {
  var address = document.getElementById("address").value;
  codeAddress(address);
}
</script>

<script src="http://maps.googleapis.com/maps/api/js?&sensor=false"></script>
<div id="map-canvas" style="width:600px;height:600px;"></div>
</div>
<div id="top_map_middle">
<div style="width:600px;">

<form action="/map/create" accept-charset="UTF-8" method="post" name="mapdetail">
	<%= hidden_field_tag :authenticity_token, form_authenticity_token %>
  	<input type="hidden" name="lat" id="lat" value=""/>
  	<input type="hidden" name="lgn" id="lgn" value=""/>
  	ATM名：<input type="text" name="mapname" id="mapname" class="form-control" placeholder="ATM名" />
	ATM種：<select  class="form-control">
  		<option>みずほ</option>
  		<option>三菱東京UFJ</option>
  		<option>三井住友</option>
  		<option>セブン銀行</option>
	</select>
	<button class="btn btn-large btn-block btn-primary" type="button" onclick="form.submit();">登録する</button>
</form>
</div>
</div>
<hr>
ATMapperとは？<br/>
ATMをマップする<br/>
ATMを探す<br/>
利用規約<br/>
お知らせ<br/>
運営ブログ<br/>

<script type="text/javascript">
var before_title ="";
//キャンパスの要素を取得する
var canvas = document.getElementById( "map-canvas" );
var markersArray = [];
var crossSize = 19;
//中心の位置座標を指定する
var latlng = new google.maps.LatLng( 35.792621 , 139.806513 );
var map;

//地図のオプションを設定する
var mapOptions = {
	zoom: 15 ,				//ズーム値
	center: latlng,
	scrollwheel: false,
	mapTypeControlOptions: { mapTypeIds: ['sample', google.maps.MapTypeId.ROADMAP] }
};

	map = new google.maps.Map( canvas , mapOptions );
	var latlng = map.getCenter();
	var lat = latlng.lat();
	var lng = latlng.lng();
	$("#lat").val(lat);
	$("#lgn").val(lng);

google.maps.event.addListener(map, 'idle', function() {
	var latlng = map.getCenter();
	var lat = latlng.lat();
	var lng = latlng.lng();
	$("#lat").val(lat);
	$("#lgn").val(lng);
	dispLatLng();
	alert("test");
});

createCenterMaker();

/**************************************************************************/
	function CrossControl( controlDiv, map )
	/*
	* センターマーカーオブジェクト
	***************************************************************************/
	{

		var mapDiv = map.getDiv();

		// 縦のライン
		var controlCrossV = document.createElement('DIV');
		controlCrossV.style.position = 'absolute'
		controlCrossV.style.borderStyle = 'none none none solid';
		controlCrossV.style.borderWidth = '1px';
		controlCrossV.style.borderColor = 'red';
		controlCrossV.style.height = crossSize + 'px';
		controlCrossV.style.marginTop   = (( mapDiv.offsetHeight - crossSize + 1) / 2) + 'px';
		controlDiv.appendChild( controlCrossV );

		// 横のライン
		var controlCrossH = document.createElement('DIV');
		controlCrossH.style.position = 'absolute'
		controlCrossH.style.borderStyle = 'solid none none none';
		controlCrossH.style.borderWidth = '1px';
		controlCrossH.style.borderColor = 'red';
		controlCrossH.style.width = crossSize + 'px';
		controlCrossH.style.marginTop =  mapDiv.offsetHeight / 2 + 'px';
		controlCrossH.style.marginLeft = (( crossSize - 1 ) / -2) + 'px';
		controlDiv.appendChild( controlCrossH );
	}

	/**************************************************************************/
	function createCenterMaker()
	/*
	* センターマーカー作成
	***************************************************************************/
	{
		var CrossControlDiv = document.createElement('DIV');
		var crossControl = new CrossControl( CrossControlDiv, map );

		CrossControlDiv.index = 1;
		map.controls[google.maps.ControlPosition.TOP].push( CrossControlDiv );
	}



function codeAddress(address) {
  var geocoder = new google.maps.Geocoder();

  var mapOptions = {
    zoom: 18,
    scrollwheel: false,
     mapTypeId: google.maps.MapTypeId.ROADMAP
  };

  map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
  geocoder.geocode( { 'address': address}, function(results, status) {

    // ジオコーディングが成功した場合
    if (status == google.maps.GeocoderStatus.OK) {
    map.setCenter(results[0].geometry.location);
	var latlng = map.getCenter();
	var lat = latlng.lat();
	var lng = latlng.lng();
	$("#lat").val(lat);
	$("#lgn").val(lng);
	createCenterMaker();

	google.maps.event.addListener(map, 'dragend', function() {
		var latlng = map.getCenter();
		var lat = latlng.lat();
		var lng = latlng.lng();
		$("#lat").val(lat);
		$("#lgn").val(lng);
	});


    } else {
      console.log('Geocode was not successful for the following reason: ' + status);
    }
  });
}
function dispLatLng(){
var latlngBounds = map.getBounds();
var swLatlng = latlngBounds.getSouthWest();
var swlat = swLatlng.lat();
var swlng = swLatlng.lng();

var neLatlng = latlngBounds.getNorthEast();
var nelat = neLatlng.lat();
var nelng = neLatlng.lng();
ajaxrequest(null, "get", '/map/list?swlat=' + swlat + '&swlng=' + swlng + '&nelat=' + nelat + '&nelng=' + nelng,
	function(j_data){
		update_maker(j_data);
	},
	function(j_data){
		alert("sorry, this system is busy. Please try again later.")
	});
}

function ajaxrequest(data,type,url,successcb,errorcb){
    $.ajax({
      type: type,
      url: url,
      headers:{'X-CSRF-Token': $('#authenticity_token').val()},
      contentType: 'application/json',
      dataType: 'json',
      data:data,
      success: function(j_data){
        successcb(j_data);
      },error: function(j_data){
        if(j_data.status == 400){
          if(j_data.responseText == "length"){
            alert("一つのボードに登録可能なメモは10本です。\nメモを削除するか、ボードを作成してください。")
          }
        }else{
          errorcb(j_data);
        }
      }
    });

}
function update_maker(json) {
var markers = new Array(); 
    for(i=0;i<json.length;i++){
    	console.log(json[i]['lat'] +" : " + json[i]['lgn']);
		markers[i] = new google.maps.Marker({
   		position: new google.maps.LatLng(
   			json[i]['lat'],
   			json[i]['lgn']),
   			map: map
   		});
 	}
}
</script>
